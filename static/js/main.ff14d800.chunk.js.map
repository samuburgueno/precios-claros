{"version":3,"sources":["Scanner.js","index.js"],"names":["Scanner","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","setRef","webcam","state","codigo","getScreenshot","bind","assertThisInitialized","dataUri","Quagga","decodeSingle","decoder","readers","locate","src","result","codeResult","setState","code","scanImage","react_default","a","createElement","onClick","react_webcam_default","audio","height","ref","screenshotFormat","width","videoConstraints","facingMode","exact","React","Component","ReactDOM","render","Scanner_Scanner","document","getElementById"],"mappings":"mPAIqBA,cACjB,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KASVQ,OAAS,SAAAC,GACLR,EAAKQ,OAASA,GARdR,EAAKS,MAAQ,CACTC,OAAQ,aAGZV,EAAKW,cAAgBX,EAAKW,cAAcC,KAAnBX,OAAAY,EAAA,EAAAZ,CAAAD,IAPNA,yEAcTc,GACNC,IAAOC,aAAa,CAChBC,QAAS,CACLC,QAAS,CAAC,eAEdC,QAAQ,EACRC,IAAKN,GACN,SAASO,GACLA,EAAOC,WACNnB,KAAKoB,SAAS,CACVb,OAAQW,EAAOC,WAAWE,OAG9BrB,KAAKoB,SAAS,CACVb,OAAQ,sBAGlBE,KAAKT,+CAIHA,KAAKK,OAAOG,gBACZR,KAAKsB,UAAUtB,KAAKK,OAAOG,iBAE3BR,KAAKoB,SAAS,CACVb,OAAQ,0DAMhB,OACIgB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,UAAKzB,KAAKM,MAAMC,QAChBgB,EAAAC,EAAAC,cAAA,UAAQC,QAAS1B,KAAKQ,eAAtB,QACAe,EAAAC,EAAAC,cAACE,EAAAH,EAAD,CACII,OAAO,EACPC,OAAQ,IACRC,IAAK9B,KAAKI,OACV2B,iBAAiB,aACjBC,MAAO,IACPC,iBAAkB,CAChBD,MAAO,IACPH,OAAQ,IACRK,WAAY,CAAEC,MAAO,0BA3DNC,IAAMC,WCG3CC,IAASC,OAAOhB,EAAAC,EAAAC,cAACe,EAAD,MAAaC,SAASC,eAAe","file":"static/js/main.ff14d800.chunk.js","sourcesContent":["import React from 'react';\nimport Quagga from 'quagga'\nimport Webcam from \"react-webcam\";\n\nexport default class Scanner extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            codigo: \"Inicio...\"\n        }\n\n        this.getScreenshot = this.getScreenshot.bind(this)\n    }\n\n    setRef = webcam => {\n        this.webcam = webcam;\n    };\n\n    scanImage(dataUri) {\n        Quagga.decodeSingle({\n            decoder: {\n                readers: [\"ean_reader\"],\n            },\n            locate: true,\n            src: dataUri\n        }, function(result) {\n            if(result.codeResult) {\n                this.setState({\n                    codigo: result.codeResult.code\n                });\n            } else {\n                this.setState({\n                    codigo: \"Error de lectura\"\n                });\n            }\n        }.bind(this));\n    }\n\n    getScreenshot() {\n        if (this.webcam.getScreenshot()) {\n            this.scanImage(this.webcam.getScreenshot())\n        } else {\n            this.setState({\n                codigo: \"No se puede capturar\"\n            });\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                <h1>{this.state.codigo}</h1>\n                <button onClick={this.getScreenshot}>Scan</button>\n                <Webcam\n                    audio={false}\n                    height={350}\n                    ref={this.setRef}\n                    screenshotFormat=\"image/jpeg\"\n                    width={350}\n                    videoConstraints={{\n                      width: 640,\n                      height: 480,\n                      facingMode: { exact: \"environment\" }\n                    }}\n                />\n            </div>\n        );\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './index.css';\n// import App from './App';\nimport Scanner from './Scanner';\n// import * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Scanner />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}