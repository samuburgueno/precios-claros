{"version":3,"sources":["configQuagga.js","App.js","serviceWorker.js","index.js","IMG_2934.jpg"],"names":["configQuagga","inputStream","name","type","target","constraints","width","height","facingMode","decoder","readers","debug","showCanvas","showPatches","showFoundPatches","showSkeleton","showLabels","showPatchLabels","showRemainingPatchLabels","boxFromPatches","showTransformed","showTransformedBox","showBB","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","codigo","scannerIsRunning","handlerClick","bind","assertThisInitialized","Quagga","decodeSingle","locate","src","image","result","codeResult","setState","code","init","err","console","log","start","onProcessed","drawingCtx","canvas","ctx","overlay","drawingCanvas","dom","boxes","clearRect","parseInt","getAttribute","filter","box","forEach","ImageDebug","drawPath","x","y","color","lineWidth","line","onDetected","stop","event","stopScanner","startScanner","react_default","a","createElement","className","alt","id","onClick","value","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.cdf08cc9.chunk.js","sourcesContent":["const configQuagga = {\n    inputStream: {\n        name: \"Live\",\n        type: \"LiveStream\",\n        target: '#scanner-container',\n        constraints: {\n            width: 480,\n            height: 320,\n            facingMode: \"environment\"\n        },\n    },\n    decoder: {\n        readers: [\n        \"code_128_reader\",\n        \"ean_reader\",\n        \"ean_8_reader\",\n        \"code_39_reader\",\n        \"code_39_vin_reader\",\n        \"codabar_reader\",\n        \"upc_reader\",\n        \"upc_e_reader\",\n        \"i2of5_reader\"\n        ],\n        debug: {\n            showCanvas: true,\n            showPatches: true,\n            showFoundPatches: true,\n            showSkeleton: true,\n            showLabels: true,\n            showPatchLabels: true,\n            showRemainingPatchLabels: true,\n            boxFromPatches: {\n                showTransformed: true,\n                showTransformedBox: true,\n                showBB: true\n            }\n        }\n    }\n}\n\nexport default configQuagga;\n","import React, { Component } from 'react';\nimport Quagga from 'quagga'\nimport configQuagga from './configQuagga.js';\n\nimport image from './IMG_2934.jpg';\n\nclass App extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            codigo: \"Procesando...\",\n            scannerIsRunning: false\n        }\n\n        this.handlerClick = this.handlerClick.bind(this)\n    }\n\n    componentDidMount() {\n        Quagga.decodeSingle({\n            decoder: {\n                readers: [\"ean_reader\"],\n            },\n            locate: true,\n            src: image\n        }, function(result){\n            if(result.codeResult) {\n                this.setState({\n                    codigo: result.codeResult.code\n                });\n            } else {\n                this.setState({\n                    codigo: \"Error de lectura\"\n                });\n            }\n        }.bind(this));\n    }\n\n    startScanner() {\n        Quagga.init(configQuagga, function (err) {\n            if (err) {\n                console.log(err);\n                return\n            }\n\n            console.log(\"Initialization finished. Ready to start\");\n            Quagga.start();\n\n            this.setState({\n                scannerIsRunning: true\n            });\n        }.bind(this));\n\n        Quagga.onProcessed(function (result) {\n            var drawingCtx = Quagga.canvas.ctx.overlay,\n            drawingCanvas = Quagga.canvas.dom.overlay;\n\n            if (result) {\n                if (result.boxes) {\n                    drawingCtx.clearRect(0, 0, parseInt(drawingCanvas.getAttribute(\"width\")), parseInt(drawingCanvas.getAttribute(\"height\")));\n                    result.boxes.filter(function (box) {\n                        return box !== result.box;\n                    }).forEach(function (box) {\n                        Quagga.ImageDebug.drawPath(box, { x: 0, y: 1 }, drawingCtx, { color: \"green\", lineWidth: 2 });\n                    });\n                }\n\n                if (result.box) {\n                    Quagga.ImageDebug.drawPath(result.box, { x: 0, y: 1 }, drawingCtx, { color: \"#00F\", lineWidth: 2 });\n                }\n\n                if (result.codeResult && result.codeResult.code) {\n                    Quagga.ImageDebug.drawPath(result.line, { x: 'x', y: 'y' }, drawingCtx, { color: 'red', lineWidth: 3 });\n                }\n            }\n        });\n\n\n        Quagga.onDetected(function (result) {\n            console.log(\"Barcode detected and processed : [\" + result.codeResult.code + \"]\", result);\n        });\n    }\n\n    stopScanner() {\n        Quagga.stop()\n        this.setState({\n            scannerIsRunning: false\n        });\n    }\n\n    handlerClick(event) {\n        if (this.state.scannerIsRunning) {\n            this.stopScanner()\n        } else {\n            this.startScanner();\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n            <h1>CÃ³digo: {this.state.codigo}</h1>\n            <img src={image} alt=\"\"/>\n            <div id=\"scanner-container\"></div>\n            <input onClick={this.handlerClick} type=\"button\" id=\"btn\" value=\"Start/Stop the scanner\" />\n            </div>\n            );\n    }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/IMG_2934.38da314c.jpg\";"],"sourceRoot":""}